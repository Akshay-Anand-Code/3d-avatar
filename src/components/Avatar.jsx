/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useMemo, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF(
    "/models/pump.glb"
  );

  const { message, onMessagePlayed, chat } = useChat();

  // Debug: Log the model structure to see what nodes are available
  useEffect(() => {
    console.log("Available nodes:", Object.keys(nodes));
    console.log("Available materials:", Object.keys(materials));
    if (nodes.EyeLeft) {
      console.log("EyeLeft morphTargetDictionary:", nodes.EyeLeft.morphTargetDictionary);
    }
  }, [nodes, materials]);

  const [lipsync, setLipsync] = useState();

  useEffect(() => {
    console.log(message);
    if (!message) {
      setAnimation("Idle");
      return;
    }
    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message]);

  // One-time: dump all node names to help target bones/nodes in custom models
  useEffect(() => {
    try {
      const names = [];
      scene.traverse((o) => {
        if (o && o.name) names.push(o.name);
      });
      const sorted = names.sort();
      console.log("All model nodes (sorted):", sorted);
      // Expose helper to re-run manually from DevTools
      // Usage: window.dumpNodes()
      window.dumpNodes = () => {
        const n = [];
        scene.traverse((o) => o?.name && n.push(o.name));
        console.log("All model nodes (sorted):", n.sort());
      };
    } catch (e) {}
  }, [scene]);

  const { animations } = useGLTF("/models/animations.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const supportsExternalAnimations = useMemo(() => {
    return (
      !!scene.getObjectByName("RightFoot") ||
      !!scene.getObjectByName("Armature") ||
      !!scene.getObjectByName("Hips")
    );
  }, [scene]);

  // Target actual bones from your custom rig for procedural motion
  const headBone = useMemo(
    () =>
      scene.getObjectByName("spine011") ||
      scene.getObjectByName("spine010") ||
      scene.getObjectByName("spine009"),
    [scene]
  );
  const chestBone = useMemo(
    () =>
      scene.getObjectByName("spine006") ||
      scene.getObjectByName("spine005") ||
      scene.getObjectByName("spine004"),
    [scene]
  );
  const leftArm = useMemo(() => scene.getObjectByName("upper_armL"), [scene]);
  const rightArm = useMemo(() => scene.getObjectByName("upper_armR"), [scene]);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  useEffect(() => {
    if (!supportsExternalAnimations) return;
    actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => actions[animation]?.fadeOut?.(0.5);
  }, [animation, supportsExternalAnimations]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {}
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  // Helpers derived from backend control signals
  const gesture = message?.gesture || "idle";
  const energy = Math.min(1, Math.max(0, message?.intensity ?? 0.5));
  const tempo = Math.min(1, Math.max(0, message?.tempo ?? 0.5));

  useFrame((state) => {
    // Only apply morph targets if the model has them
    const hasMorphTargets = nodes.EyeLeft && nodes.EyeLeft.morphTargetDictionary;
    if (hasMorphTargets) {
      !setupMode &&
        Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
          const mapping = facialExpressions[facialExpression];
          if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
            return; // eyes wink/blink are handled separately
          }
          if (mapping && mapping[key]) {
            lerpMorphTarget(key, mapping[key], 0.1);
          } else {
            lerpMorphTarget(key, 0, 0.1);
          }
        });

      lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
      lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);
    } else {
      // Fallback procedural animation when model has no morph targets
      // Subtle idle sway
      if (group.current) {
        const t = state.clock.getElapsedTime();
        const idleIntensity = 0.02 + energy * 0.02; // scale with energy
        // body sway
        group.current.position.y = Math.sin(t * (0.7 + tempo * 0.6)) * 0.02;

        // chest/torso gentle breathing
        if (chestBone) {
          chestBone.rotation.z = Math.sin(t * 0.6) * idleIntensity;
          chestBone.rotation.x = Math.sin(t * 0.5) * idleIntensity;
        } else {
          group.current.rotation.y = Math.sin(t * 0.4) * idleIntensity;
        }

        // head look/nod
        if (headBone) {
          headBone.rotation.y = Math.sin(t * (0.6 + tempo * 0.8)) * (idleIntensity * 1.2);
        }

        // Emphasize motion while "speaking"
        if (message) {
          const talkIntensity = 0.03 + energy * 0.06;
          if (headBone) {
            headBone.rotation.x = Math.sin(t * (3.0 + tempo * 3.0)) * talkIntensity;
          } else {
            group.current.rotation.x += Math.sin(t * (3.0 + tempo * 3.0)) * talkIntensity;
          }
          group.current.position.y += Math.abs(Math.sin(t * 6.0)) * 0.015;

          // Gesture presets
          if (leftArm && rightArm) {
            switch (gesture) {
              case "explain": {
                const a = Math.sin(t * (2.0 + tempo * 2.5)) * (0.15 * energy);
                leftArm.rotation.z = -Math.abs(a);
                rightArm.rotation.z = Math.abs(a);
                break;
              }
              case "agree": {
                const a = Math.sin(t * (2.5 + tempo * 3.0)) * (0.12 * energy);
                if (headBone) headBone.rotation.x += Math.abs(a) * 0.6;
                leftArm.rotation.y = a * 0.5;
                rightArm.rotation.y = -a * 0.5;
                break;
              }
              case "disagree": {
                const a = Math.sin(t * (2.2 + tempo * 2.2)) * (0.18 * energy);
                if (headBone) headBone.rotation.y += a;
                leftArm.rotation.x = a * 0.3;
                rightArm.rotation.x = -a * 0.3;
                break;
              }
              case "point": {
                // Raise right arm; small oscillation
                rightArm.rotation.x = -0.6 * energy + Math.sin(t * (1.5 + tempo * 2.0)) * 0.05;
                rightArm.rotation.z = 0.15 * energy;
                break;
              }
              case "count": {
                const a = Math.abs(Math.sin(t * (2.8 + tempo * 2.0))) * (0.14 * energy);
                leftArm.rotation.z = -a;
                rightArm.rotation.z = a;
                break;
              }
              case "delight": {
                const a = Math.abs(Math.sin(t * (3.2 + tempo * 3.0))) * (0.16 * energy);
                if (headBone) headBone.rotation.x += a * 0.6;
                leftArm.rotation.z = -a * 0.8;
                rightArm.rotation.z = a * 0.8;
                break;
              }
              case "shrug": {
                const a = Math.abs(Math.sin(t * (1.8 + tempo * 1.5))) * (0.12 * energy);
                leftArm.rotation.x = a * 0.4;
                rightArm.rotation.x = a * 0.4;
                break;
              }
              default: {
                // idle micro-gestures
                const a = Math.sin(t * (2.2 + tempo * 1.5)) * (0.1 * energy);
                leftArm.rotation.z = -Math.abs(a);
                rightArm.rotation.z = Math.abs(a);
              }
            }
          }
        }
      }
    }

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (message && lipsync) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
    }

    if (hasMorphTargets) {
      Object.values(corresponding).forEach((value) => {
        if (appliedMorphTargets.includes(value)) {
          return;
        }
        lerpMorphTarget(value, 0, 0.1);
      });
    }
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      if (nodes.EyeLeft && nodes.EyeLeft.morphTargetDictionary) {
        const emotionValues = {};
        Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
          if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
            return; // eyes wink/blink are handled separately
          }
          const value =
            nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ];
          if (value > 0.01) {
            emotionValues[key] = value;
          }
        });
        console.log(JSON.stringify(emotionValues, null, 2));
      } else {
        console.log("No morph targets available in this model");
      }
    }),
  });

  const [, set] = useControls("MorphTarget", () => {
    // Only create morph target controls if the model has them
    if (nodes.EyeLeft && nodes.EyeLeft.morphTargetDictionary) {
      return Object.assign(
        {},
        ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
          return {
            [key]: {
              label: key,
              value: 0,
              min: nodes.EyeLeft.morphTargetInfluences[
                nodes.EyeLeft.morphTargetDictionary[key]
              ],
              max: 1,
              onChange: (val) => {
                if (setupMode) {
                  lerpMorphTarget(key, val, 1);
                }
              },
            },
          };
        })
      );
    }
    return {}; // Return empty object if no morph targets
  });

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} dispose={null} ref={group}>
      {/* Render the entire scene from the GLB file */}
      <primitive object={scene} />
    </group>
  );
}

useGLTF.preload("/models/pump.glb");
useGLTF.preload("/models/animations.glb");
